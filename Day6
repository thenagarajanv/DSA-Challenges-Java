// https://leetcode.com/problems/single-threaded-cpu/
class Solution {
    public int[] getOrder(int[][] tasks) {
        int n = tasks.length;
        int [][]a = new int[n][3];
        for(int i=0;i<n;i++){
            a[i][0] = tasks[i][0];
            a[i][1] = tasks[i][1];
            a[i][2] = i;
        }
        Arrays.sort(a, (a1, b) -> (a1[0] == b[0]) ? a1[1] - b[1] : a1[0] - b[0]);
        int []ans = new int[n];
        ans[0] = a[0][2];
        int processTime = a[0][0] + a[0][1];
        int st = 1;
        int in = 1;
        TreeMap<Integer, TreeSet<Integer>> tm = new TreeMap();
        while(in < n){
            while(st < n && a[st][0] <= processTime){
                TreeSet<Integer> ts = tm.getOrDefault(a[st][1], new TreeSet());
                ts.add(a[st][2]);
                tm.put(a[st++][1], ts);
            }
            if(tm.size() == 0){
                ans[in] = a[st++][2];
            }else{
                int fk = tm.firstKey();
                TreeSet<Integer> ts = tm.get(fk);
                int first = ts.first();
                ans[in] = first;
                ts.remove(first);
                if(ts.size() == 0){
                    tm.remove(fk);
                }
            }
            processTime = Math.max(tasks[ans[in]][0], processTime) + tasks[ans[in]][1];
            in ++;
        }
        return ans;
    }
}
